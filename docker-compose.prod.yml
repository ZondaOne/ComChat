version: '3.8'

services:
  # Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: comchat_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - comchat_network

  # PostgreSQL Database with replication
  postgres:
    image: postgres:15-alpine
    container_name: comchat_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-comchat}
      POSTGRES_USER: ${POSTGRES_USER:-comchat_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - postgres_logs:/var/log/postgresql
    ports:
      - "5432:5432"
    restart: unless-stopped
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-comchat_user} -d ${POSTGRES_DB:-comchat}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - comchat_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: comchat_redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - comchat_network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: comchat_qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
      - qdrant_logs:/qdrant/logs
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__CLUSTER__ENABLED: false
      QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS: 4
    restart: unless-stopped
    networks:
      - comchat_network

  # Ollama for local AI models
  ollama:
    image: ollama/ollama:latest
    container_name: comchat_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - ollama_logs:/var/log/ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    restart: unless-stopped
    # Uncomment for GPU support
    # runtime: nvidia
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all
    networks:
      - comchat_network

  # FastAPI Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: comchat_backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-comchat_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-comchat}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_BASE_URL=http://ollama:11434
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    volumes:
      - backend_logs:/app/logs
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    networks:
      - comchat_network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: comchat_frontend
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${FRONTEND_API_URL:-http://localhost/api}
      - REACT_APP_ENVIRONMENT=production
    volumes:
      - frontend_logs:/var/log/nginx
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - comchat_network

  # Telegram Bot Adapter
  telegram-adapter:
    build:
      context: ./messaging-adapters/telegram
      dockerfile: Dockerfile.prod
    container_name: comchat_telegram
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - BACKEND_URL=http://backend:8000
      - TENANT_SLUG=${DEFAULT_TENANT_SLUG:-demo}
      - NODE_ENV=production
    volumes:
      - telegram_logs:/app/logs
    depends_on:
      - backend
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    networks:
      - comchat_network

  # WhatsApp Bot Adapter
  whatsapp-adapter:
    build:
      context: ./messaging-adapters/whatsapp
      dockerfile: Dockerfile.prod
    container_name: comchat_whatsapp
    environment:
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - WHATSAPP_VERIFY_TOKEN=${WHATSAPP_VERIFY_TOKEN}
      - WHATSAPP_PHONE_NUMBER_ID=${WHATSAPP_PHONE_NUMBER_ID}
      - BACKEND_URL=http://backend:8000
      - TENANT_SLUG=${DEFAULT_TENANT_SLUG:-demo}
      - NODE_ENV=production
    volumes:
      - whatsapp_logs:/app/logs
    depends_on:
      - backend
      - redis
    ports:
      - "3001:3001"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    networks:
      - comchat_network

  # Monitoring & Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: comchat_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - comchat_network

  grafana:
    image: grafana/grafana:latest
    container_name: comchat_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - comchat_network

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: comchat_loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - comchat_network

  promtail:
    image: grafana/promtail:latest
    container_name: comchat_promtail
    volumes:
      - /var/log:/var/log:ro
      - backend_logs:/var/log/backend:ro
      - frontend_logs:/var/log/frontend:ro
      - nginx_logs:/var/log/nginx:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - comchat_network

  # Backup service
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: comchat_backup
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-comchat}
      - POSTGRES_USER=${POSTGRES_USER:-comchat_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - S3_ACCESS_KEY=${BACKUP_S3_ACCESS_KEY}
      - S3_SECRET_KEY=${BACKUP_S3_SECRET_KEY}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
    volumes:
      - postgres_data:/postgres_data:ro
      - redis_data:/redis_data:ro
      - backup_data:/backups
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - comchat_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  backup_data:
    driver: local
  backend_logs:
    driver: local
  frontend_logs:
    driver: local
  nginx_logs:
    driver: local
  postgres_logs:
    driver: local
  telegram_logs:
    driver: local
  whatsapp_logs:
    driver: local
  qdrant_logs:
    driver: local
  ollama_logs:
    driver: local

networks:
  comchat_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16